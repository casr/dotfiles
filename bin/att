#!/bin/sh

# NAME
#      att - attach to tmux
#
# SYNOPSIS
#      att
#
# DESCRIPTION
#      Present a list of projects found under `~/Projects`. A project is
#      determined to be something that has a `.git` directory at its top-level.
#
#      The session name is derived from everything between the `.git` directory
#      and `~/Projects`.

set -eu

prog_name="${0##*/}"

usage() {
	cat <<EOF
usage: ${prog_name} [-f]
EOF
}

lines=15
while getopts ":f" opt; do
	case ${opt} in
	f)
		lines=999
		;;
	\?)
		printf '%s: illegal option -- %s\n' "${prog_name}" "${OPTARG}"
		usage
		exit 1
		;;
	esac
done
shift $((OPTIND-1))

# We fix `project_root` to this directory as session names are derived from the
# file system hierarchy and allowing this to be configurable would open us up
# to session name clashes.
project_root="${HOME}/Projects"

projects="$(cd "${project_root}" || exit 1; find -sL . -mindepth 1 -maxdepth 4 -path '*/node_modules/*' -prune -o -name .git -exec /bin/sh -c "printf '%s\n' \"\$@\" | sed -e 's_^\./__' -e 's_/\.git\$__'" "find-exec" {} +)"
projects_with_session="$(tmux list-sessions -F "#{?#{m:${project_root}/*,#{session_path}},#{s|^${project_root}/||:#{session_path}},}" | sed '/^$/d')"
projects_without_session="$(printf '%s\n' "${projects_with_session}" "${projects}" | sort | uniq -u)"
all_sessions="$(tmux list-sessions -F "#{?#{m:${project_root}/*,#{session_path}},#{s|^${project_root}/||:#{session_path}},#{session_name}}")"

session_name=$(
	printf '%s\n' "${all_sessions}" "--" "${projects_without_session}" | \
		fzy --lines "${lines}" --prompt "Choose a project ❯ "
)
start_directory="${project_root}/${session_name}"

# tmux will normalise the session name from the one given. Align `session_name`
# to match tmux's so that we can switch to the session later
session_name=$(printf '%s\n' "${session_name}" | sed 's/\./_/g')

# Likely outcomes are that the user aborted the input with C-d or that input
# was added but it did not result in a match in which case we filter out
# non-existing project directories.
if [ -z "${session_name}" ]; then
	exit 1
fi

if ! tmux has-session -t "=${session_name}" 2>/dev/null; then
	if [ -d "${start_directory}" ]; then
		tmux new-session -dc "${start_directory}" -s "${session_name}"
	else
		exit 1
	fi
fi

if [ "${TMUX:+is_set}" = is_set ]; then
	exec tmux switch-client -t "=${session_name}"
else
	exec tmux attach-session -t "=${session_name}"
fi
